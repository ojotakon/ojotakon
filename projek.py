# -*- coding: utf-8 -*-
"""projek.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11CDgZAGy5nw_gz1KXwx-EFPL-Ur0EQPy
"""

import streamlit as st
import pandas as pd
df = pd.read_csv('depressionData.csv')
df.head()

df.info()

# streamlit
st.title('Depression Prediction')
st.write('Fill this form as your current condition')
st.write('')

# widget input untuk data baru
new_age = st.number_input('**Age**', value=0, min_value=0, max_value=4)
st.write('25-30 tahun:0')
st.write('30-35 tahun:1')
st.write('35-40 tahun:2')
st.write('40-50 tahun:3')
st.write('50-55 tahun:4')
st.write('')
st.write('')

new_irritable_towards_people = st.number_input('**Irritable towards people**, value= 0, min_value= 0, max_value= 2')
st.write('Yes: 1 | No: 0 | Sometimes= 2')
st.write('')
st.write('')

new_trouble_sleeping_at_night = st.number_input('**Trouble sleeping at night**, value= 0, min_value= 0, max_value= 2')
st.write('Yes: 1 | No: 0 | Two or more days a week= 2')
st.write('')
st.write('')

new_problems_concentrating_or_making_decision = st.number_input('**Problems concentrating or making decision**, value= 0, min_value= 0, max_value= 2')
st.write('Yes: 1 | No: 0 | Often= 2')
st.write('')
st.write('')

new_loss_of_appetite = st.number_input('**Loss of appetite**, value= 0, min_value= 0, max_value= 2')
st.write('Yes: 1 | No: 0 | Not at all= 2')
st.write('')
st.write('')

new_feeling_of_guilt = st.number_input('**Feeling of guilt**, value= 0, min_value= 0, max_value= 2')
st.write('Yes: 1 | No: 0 | Maybe= 2')
st.write('')
st.write('')

new_problems_of_bonding_with_people = st.number_input('**Problems of bonding with people**, value= 0, min_value= 0, max_value= 2')
st.write('Yes: 1 | No: 0 | Sometimes= 2')
st.write('')
st.write('')

new_suicide_attempt = st.number_input('**Suicide attempt**', value=0, min_value=0, max_value=2)
st.write('Yes: 1 | No: 0 | Not interested to say: 2')
st.write('')
st.write('')

prediksi =  st.button('Predict')
# split the data into features (X) and variable (Y)
X = df.drop(columns=['Depressed','Timestamp'])
X['Age'] = X['Age'].map({'25-30':0, '30-35':1, '35-40':2, '40-45':3, '45-50':4})
X['Feeling sad'] = X['Feeling sad'].map({'Yes':1, 'No':0, 'Sometimes':2})
X['Irritable towards people'] = X['Irritable towards people'].map({'Yes':1, 'No':0, 'Sometimes':2})
X['Trouble sleeping at night'] = X['Trouble sleeping at night'].map({'Yes':1, 'No':0, 'Two or more days a week':2})
X['Problems concentrating or making decision'] = X['Problems concentrating or making decision'].map({'Yes':1, 'No':0, 'Often':2})
X['loss of appetite'] = X['loss of appetite'].map({'Yes':1, 'No':0, 'Not at all':2})
X['Feeling of guilt'] = X['Feeling of guilt'].map({'Yes':1, 'No':0, 'Maybe':2})
X['Problems of bonding with people'] = X['Problems of bonding with people'].map({'Yes':1, 'No':0, 'Sometimes':2})
X['Suicide attempt'] = X['Suicide attempt'].map({'Yes':1, 'No':0, 'Not interested to say':2})
y = df['Depressed'].map({'Yes':1, 'No':0})

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standarisasi fitur
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build the model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(10, activation='softmax'),
    Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# load the train model
from tensorflow.keras.models import load_model
st.title('depressionData')
st.write('enter the patient data below')
st.dataframe(df)

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test), verbose=2)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)

df.head()

# data baru
import numpy as np
if prediksi:
    new_data = np.array([[new_age, new_feeling_sad, new_irritable_towards_people, new_trouble_sleeping_at_night, new_problems_concentrating_or_making_decision, new_feeling_of_guilt, new_problems_of_bonding_with_people, new_suicide_attempt]])
    new_data_scaled = scaler.transform(new_data)

# prediksi menggunakan model yang dilatih
    predictions = model.predict(new_data_scaled)

#konversi ke new data menggunakan threshold (0.5)
    binary_predictions = (predictions > 0.5).astype (int)

    if (binary_predictions==0):
        st.write("Congrats, You are not deppresed")
    else:
        st.write("You are depressed")

